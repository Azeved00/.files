(include "colors.yuck")

; ============= POOL DEFs ==================

(defpoll time :interval "10s"
    "date '+D %b %d, %Y T %H:%M'")


(defpoll red-light :interval "1s"
    "xrandr --verbose | awk -F: '/Gamma/ { if ( $2 + $3 + $4 != 3.0 ) { print \"\"; } else { print \"\"; } exit; }'")

; ============= Widgets ==================
(defwidget metric [?icon value ?class ?onchange]
    (box :orientation "h"
        :class "metric ${class}"
        :space-evenly false
        (box :class "icon" icon)
        (box :class "value" value)))

(defwidget revealer-on-hover [var varname ?class ?duration ?transition]
    (box  :class "revealer-on-hover ${class}"
        :orientation "h"
        :space-evenly false
        (eventbox :class "eventbox"
              :onhover "${EWW_CMD} update ${varname}=true"
              :onhoverlost "${EWW_CMD} update ${varname}=false"
            (box :space-evenly false
                (children :nth 0)
                (revealer :reveal var
                    :transition {transition ?: "slideright"}
                    :duration {duration ?: "500ms"}
                    (children :nth 1)
                )
            )
        )
    )
)

; ============= VOLUME ==================
(defpoll volume :interval "1s"
    "awk -F[][] '/Left:/ { if ($4 == \"on\") {print $2} else {print \"muted\"} }' <(amixer sget Master)")
(defvar revealVolume false)
(defwidget volume []
        (eventbox
            :class "hover-module"
            :style {(volume == "muted") ? "background-color: ${white};color: ${line}" : ""}
            :onclick "amixer set Master toggle"
            :onrightclick "pavucontrol &"
            (revealer-on-hover :class "hl-on-hover"
                :var revealVolume
                :varname "revealVolume"
                :transition "slideleft"
                :class "volume"
                "VOL"
                (metric
                    :class "volume"
                    :value volume)
            )
        )
)

; ============= CPU TEMPERATURE ==================
(defpoll cpu-temp :interval "1s"
    "cat /sys/class/hwmon/hwmon1/temp1_input | awk '{printf \"%2.f\", $1/1000}'")
(defvar revealCPU false)
(defwidget cpu []
    (box :space-evenly false
        :class "hover-module"
        :style {(cpu-temp >= 60) ? "background-color: ${red};color: ${white}" : ""}
        (revealer-on-hover :class "hl-on-hover"
            :var revealCPU
            :varname "revealCPU"
            :transition "slideleft"
            :class "cpu"
            "CPU"
            (metric :value "${cpu-temp} °C")
        )
    )
)

; ============= RAM TEMPERATURE ==================
(defpoll ram :interval "1s"
    "free -m | grep 'Mem:' | awk '{ printf \"%2.f\", $3/$2*100 }'")
(defvar revealRAM false)
(defwidget ram []
    (box :space-evenly false
        :class "hover-module"
        :style {(ram >= 70) ? "background-color: ${red};color: ${white}" : ""}
        (revealer-on-hover :class "hl-on-hover"
            :var revealRAM
            :varname "revealRAM"
            :transition "slideleft"
            :class "ram"
            "RAM"
            (metric :value "${ram} %")
        )
    )
)

; ============= WIFI CONNECTION ==================
(defpoll wifi :interval "1s"
    "nmcli -t -f NAME connection show --active | awk -F: '!/lo/{print $1; found=1} END{if (!found) print \"not connected\"}'")
(defvar revealWIFI false)
(defwidget wifi [?class]
    (box :space-evenly false
        :class "hover-module ${class} ${(wifi == "not connected") ? "inactive" : "active"}"
        (revealer-on-hover :class "hl-on-hover"
            :var revealWIFI
            :varname "revealWIFI"
            :transition "slideleft"
            :class "wifi"
            "WIFI"
            (metric
                :class "${(wifi == "not connected") ? "inactive" : "active"}"
                :value wifi)
        )
    )
)
