(include "src/colors.yuck")

; ============= Widgets ==================
(defwidget metric [?icon value ?class ?onchange]
    (box :orientation "h"
        :class "metric ${class}"
        :space-evenly false
        (box :class "icon" icon)
        (box :class "value" value)))

(defwidget stat [?class ?style ?visible]
    (box :orientation "h"
        :style "${style}"
        :class "stat ${class}"
        :visible "${visible}"
        (children :nth 0)))

(defwidget revealer-on-hover [var varname ?class ?duration ?transition]
    (box  :class "revealer-on-hover ${class}"
        :orientation "h"
        :space-evenly false
        (eventbox :class "eventbox"
              :onhover "${EWW_CMD} update ${varname}=true"
              :onhoverlost "${EWW_CMD} update ${varname}=false"
            (box :space-evenly false
                (children :nth 0)
                (revealer :reveal var
                    :transition {transition ?: "slideright"}
                    :duration {duration ?: "500ms"}
                    (children :nth 1)
                )
            )
        )
    )
)

; =============== TIME ====================
(defpoll time-var :interval "30s"
    "date '+  %b %d, %Y       %H:%M'")
(defpoll calendar_day :interval "10h"
    "date '+%d'")
(defpoll calendar_month :interval "10h"
    "scripts/calendar.sh")
(defpoll calendar_year :interval "10h"
    "date '+%Y'")

(defwidget time []  
    (button :onclick "${EWW_CMD} open --toggle calendar"
        (box    :class "time" time-var)))


(defwidget cal []
    (box :class "cal-box" 
    (box :class "cal-inner-box"
    (calendar :class "cal" 
              :day calendar_day 
              :month calendar_month 
              :year calendar_year))))



; ============= RED LIGHT ==================
(defpoll red-light-var :interval "1s"
    "xrandr --verbose | awk -F: '/Gamma/ { if ( $2 + $3 + $4 != 3.0 ) { print \"󰛨\"; } else { print \"󰹏\"; } exit; }'")
(defwidget red-light []
    (stat 
        :style {(red-light-var == "󰹏") ? "background-color: ${orange};color: ${white}" : "color:${orange}"}
        :class "red-light"
        (box red-light-var)
    )
)

; ============= VOLUME ==================
(defpoll volume-var :interval "1ms"
    "./scripts/volume.sh percent")
(defpoll muted-var :interval "1ms"
    "./scripts/volume.sh muted")
(defpoll volume-icon :interval "1ms"
    "./scripts/volume.sh icon")

(defvar revealVolume false)
(defwidget volume []
    (stat
        :style {(muted-var == "muted") ? "background-color: ${white};color: ${line}" : "color:${white}"}
        (eventbox
            :class "hover-module"
            :onclick "wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle"
            :onrightclick "pavucontrol &"
            :onscroll "[[ \"{}\" == \"up\" ]] && wpctl set-volume @DEFAULT_AUDIO_SINK@ 0.05+ || [[ \"{}\" == \"down\" ]] && wpctl set-volume @DEFAULT_AUDIO_SINK@ 0.05-"
            (revealer-on-hover :class "hl-on-hover"
                :var revealVolume
                :varname "revealVolume"
                :transition "slideleft"
                :class "volume"
                volume-icon
                (metric
                    :class "volume"
                    :value volume-var)
            )
        )
    )
)

; ============= CPU TEMPERATURE ==================
(defpoll cpu-temp-var :interval "1s"
    "cat /sys/class/hwmon/hwmon1/temp1_input | awk '{printf \"%2.f\", $1/1000}'")
(defvar revealCPU false)
(defwidget cpu []
    (stat
        :style {(cpu-temp-var > 60) ? "background-color: ${red};color: ${white}" : "color:${green}"}
        (box :space-evenly false
            :class "hover-module"
            (revealer-on-hover :class "hl-on-hover"
                :var revealCPU
                :varname "revealCPU"
                :transition "slideleft"
                :class "cpu"
                " "
                (metric :value " ${cpu-temp-var} °C")
            )
        )
    )
)

; ============= RAM USAGE ==================
(defpoll ram-var :interval "1s"
    "free -m | grep 'Mem:' | awk '{ printf \"%2.f\", $3/$2*100 }'")
(defvar revealRAM false)
(defwidget ram []
    (stat
        :style {(ram-var > 60) ? "background-color: ${red};color: ${white}" : "color:${green}"}
        (box :space-evenly false
            :class "hover-module"
            (revealer-on-hover :class "hl-on-hover"
                :var revealRAM
                :varname "revealRAM"
                :transition "slideleft"
                :class "ram"
                " "
                (metric :value "${ram-var} %")
            )
        )
    )
)

; ============= BATTERY STATUS ==================
(defpoll bat-exists :interval "5m"
    "[ -d /sys/class/power_supply/BAT0 ] && echo \"true\" || echo \"false\"")

(defpoll bat-status-var :interval "1s"
    :run-while bat-exists
    :initial ""
    "scripts/battery.sh status")

(defpoll bat-perc-var :interval "1s"
    :run-while bat-exists
    :initial "0"
    "scripts/battery.sh percent")

(defpoll bat-icon-var :interval "1s"
    :run-while bat-exists
    :initial ""
    "scripts/battery.sh icon")

(defvar revealBAT false)
(defwidget bat []
    (stat
        :style {
            (bat-status-var == "Charging") ? 
                "background-color: ${blue};color: ${white};" : 
                (bat-perc-var < 30) ? 
                    "background-color: ${red};color: ${white};" : 
                    "color: ${green};"
        }
        :visible bat-exists
        (box :space-evenly false
            :class "hover-module"

            (revealer-on-hover :class "hl-on-hover"
                :var revealBAT
                :varname "revealBAT"
                :transition "slideleft"
                :class "bat"
                bat-icon-var
                (metric :value "${bat-perc-var} %")
            )
        )
    )
)

; ============= WIFI CONNECTION ==================
(defpoll wifi-var :interval "1s"
    "./scripts/network.sh name")
(defpoll wifi-icon :interval "1s"
    "./scripts/network.sh icon")

(defvar revealWIFI false)
(defwidget wifi []
    (stat
        :style {(wifi-var == "not connected") ? "background-color: ${cyan};color: ${white};" : "color: ${cyan}"}
        (eventbox 
            :class "hover-module"
            :onclick "scripts/wifi-menu.sh"
            (revealer-on-hover :class "hl-on-hover"
                :var revealWIFI
                :varname "revealWIFI"
                :transition "slideleft"
                :class "wifi"
                wifi-icon
                (metric :value wifi-var)
            )
        )
    )
)
